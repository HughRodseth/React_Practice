{"version":3,"sources":["components/note.js","services/notes.js","components/notifications.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","map","i","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"8LAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCRpCK,EAAU,kCA4BD,EArBA,WACb,IAAMC,EAAUC,IAAMC,IAAIH,GACpBI,EAAc,CAClBC,GAAI,IACJP,QAAS,mCACTQ,KAAM,2BACNV,WAAW,GAEb,OAAOK,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAaxC,EAVA,SAAAO,GAEb,OADgBT,IAAMU,KAAKZ,EAASW,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UAAab,EAAb,YAAwBK,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCX5BK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,qBAAKlB,UAAU,QAAf,SACGkB,KCqDDC,EAAS,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,2GAsGSC,EA/FH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,0BAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAGAC,qBAAU,WACRC,IAEGzB,MAAK,SAAA0B,GACJT,EAASS,QAEZ,IACHC,QAAQC,IAAI,SAAUZ,EAAMa,OAAQ,SAGpC,IAwBMC,EAAcV,EAClBJ,EACAA,EAAMe,QAAO,SAAA7C,GAAI,OAAIA,EAAKG,aAsB5B,OACE,gCACE,uCACA,cAAC,EAAD,CAAcmB,QAASc,IACvB,8BACE,yBAAQ9B,QAAS,kBAAM6B,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGU,EAAYE,KAAI,SAAC9C,EAAM+C,GAAP,OACf,cAAC,EAAD,CAEE/C,KAAMA,EACNC,iBAAkB,kBAlCD,SAACW,GAC1B,IAAMZ,EAAO8B,EAAMkB,MAAK,SAAAC,GAAC,OAAIA,EAAErC,KAAOA,KAChCsC,EAAW,2BAAQlD,GAAR,IAAcG,WAAYH,EAAKG,YAEhDoC,EACU3B,EAAIsC,GACXpC,MAAK,SAAAqC,GACJpB,EAASD,EAAMb,OAAOkC,OAEvBC,OAAM,SAAAC,GACLhB,EAAgB,SAAD,OACJrC,EAAKK,QADD,sCAGfiD,YAAW,WACTjB,EAAgB,QACf,QAmByBkB,CAAmBvD,EAAKY,MAF3CmC,QAMX,uBAAMS,SAlEM,SAAAC,GACdA,EAAMC,iBACN,IAAMC,EAAa,CACjBtD,QAAS2B,EACTnB,KAAM,IAAI+C,KACVzD,UAAW0D,KAAKC,SAAW,IAM7BvB,EACUoB,GACL7C,MAAK,SAAAqC,GACNpB,EAASD,EAAMb,OAAOkC,IACtBlB,EAAW,QAmDb,UACE,uBACE8B,MAAO/B,EACPgC,SAlDiB,SAACP,GACxBhB,QAAQC,IAAIe,EAAMQ,OAAOF,OACzB9B,EAAWwB,EAAMQ,OAAOF,UAkDpB,wBAAQG,KAAK,SAAb,qBAEF,cAAC,EAAD,Q,MC3FNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.bb35340c.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li className=\"note\">\n      {note.content} \n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note\n\n","import axios from 'axios'\nconst baseUrl = 'http://localhost:3002/api/notes'\n\nconst getAll2 = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }\n  return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { \n  getAll, create, update\n}","\nimport React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","/*import label from './label.jpg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav/>\n      <Header/>\n      <div class=\"box\">\n      <Main/>\n      <Side/>\n      </div>\n      <Footer/>\n    </div>\n  );\n}\n\nfunction Nav() {\n  return (\n    <div className=\"nav\">\n      <h1>Nav</h1>\n    </div>\n  );\n}\n\nfunction Header() {\n  return (\n    <div className=\"header\">\n      <h1>header</h1>\n    </div>\n  );\n}\n\nfunction Main() {\n  return (\n    <div className=\"main\">\n      <h1>Main</h1>\n    </div>\n  );\n}\n\nfunction Side() {\n  return (\n    <div className=\"side\">\n      <h1>Side</h1>\n    </div>\n  );\n}\n\nfunction Footer() {\n  return (\n    <div className=\"footer\">\n      <h1>footer</h1>\n    </div>\n  );\n} */\n\nimport React, { useState, useEffect } from 'react'\nimport Note from './components/note'\nimport noteService from './services/notes'\nimport Notification from './components/notifications'\n\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\n    </div>\n  )\n}\n\n\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(false)\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\n\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n  console.log('render', notes.length, 'notes')\n\n\n  const addNote = event => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date(),\n      important: Math.random() > 0.5,\n    }\n\n    \n  \n    \n    noteService\n      .create(noteObject)\n        .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n  ? notes\n  : notes.filter(note => note.important)\n  \n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })  \n}\n\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>   \n      <ul>\n        {notesToShow.map((note, i) => \n          <Note\n            key={i}\n            note={note} \n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>  \n      <Footer />\n    </div>\n  )\n}\n\nexport default App","///import React from 'react';\n///import ReactDOM from 'react-dom';\n///import './index.css';\n///import App from './eventHandler.js';\n///import App from './s_components.js';\n///import App from './App.js';\n///import axios from 'axios';\n///import './index.css';\n\n\n\n/*\naxios.get('http://localhost:3001/notes').then(response => {\n  const notes = response.data\n  ReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n  )\n})\n*/\n\n/*\naxios.get('http://localhost:3001/notes').then(response => {\n  const notes = response.data\n  console.log(notes)\n})\n\n\n\naxios.get('http://localhost:3002/foobar').then(response => {\n  const foobar = response.data\n  console.log(foobar)\n})\n*/\n\n/*axios.get('http://localhost:3001/notes').then(response => {\n  const notes = response.data\n  ReactDOM.render(\n    <App notes={notes} />,\n    document.getElementById('root')\n  )\n})*/\n\n\n/*ReactDOM.render(<App notes={notes} />, \n  document.getElementById('root'))\n*/\n\n/*ReactDOM.render(\n  <React.StrictMode>\n   <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);*/\n\n\n/*}\nlet counter = 1\n\nconst refresh = () => {\n  ReactDOM.render(<App counter={counter} />, \n  document.getElementById('root'))\n}\n\nsetInterval(() => {\nrefresh()\ncounter += 1\n}, 1000)\n*/\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n///reportWebVitals();\nimport React, { Component }  from 'react';\nimport ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}